// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/apimachinery/pkg/util/proxy

package proxy

import (
	"net/url"
	"net/http"
	"time"
)

// UpgradeRequestRoundTripper provides an additional method to decorate a request
// with any authentication or other protocol level information prior to performing
// an upgrade on the server. Any response will be handled by the intercepting
// proxy.
#UpgradeRequestRoundTripper: _

// UpgradeAwareHandler is a handler for proxy requests that may require an upgrade
#UpgradeAwareHandler: {
	// UpgradeRequired will reject non-upgrade connections if true.
	UpgradeRequired: bool

	// Location is the location of the upstream proxy. It is used as the location to Dial on the upstream server
	// for upgrade requests unless UseRequestLocationOnUpgrade is true.
	Location?: null | url.#URL @go(,*url.URL)

	// AppendLocationPath determines if the original path of the Location should be appended to the upstream proxy request path
	AppendLocationPath: bool

	// Transport provides an optional round tripper to use to proxy. If nil, the default proxy transport is used
	Transport: http.#RoundTripper

	// UpgradeTransport, if specified, will be used as the backend transport when upgrade requests are provided.
	// This allows clients to disable HTTP/2.
	UpgradeTransport: #UpgradeRequestRoundTripper

	// WrapTransport indicates whether the provided Transport should be wrapped with default proxy transport behavior (URL rewriting, X-Forwarded-* header setting)
	WrapTransport: bool

	// UseRequestLocation will use the incoming request URL when talking to the backend server.
	UseRequestLocation: bool

	// UseLocationHost overrides the HTTP host header in requests to the backend server to use the Host from Location.
	// This will override the req.Host field of a request, while UseRequestLocation will override the req.URL field
	// of a request. The req.URL.Host specifies the server to connect to, while the req.Host field
	// specifies the Host header value to send in the HTTP request. If this is false, the incoming req.Host header will
	// just be forwarded to the backend server.
	UseLocationHost: bool

	// FlushInterval controls how often the standard HTTP proxy will flush content from the upstream.
	FlushInterval: time.#Duration

	// MaxBytesPerSec controls the maximum rate for an upstream connection. No rate is imposed if the value is zero.
	MaxBytesPerSec: int64

	// Responder is passed errors that occur while setting up proxying.
	Responder: #ErrorResponder

	// Reject to forward redirect response
	RejectForwardingRedirects: bool
}

_#defaultFlushInterval: time.#Duration & 200000000

// ErrorResponder abstracts error reporting to the proxy handler to remove the need to hardcode a particular
// error format.
#ErrorResponder: _

// SimpleErrorResponder is the legacy implementation of ErrorResponder for callers that only
// service a single request/response per proxy.
#SimpleErrorResponder: _

// upgradeRequestRoundTripper implements proxy.UpgradeRequestRoundTripper.
_#upgradeRequestRoundTripper: {
	RoundTripper: http.#RoundTripper
}

// onewayRoundTripper captures the provided request - which is assumed to have
// been modified by other round trippers - and then returns a fake response.
_#onewayRoundTripper: {
}

_#noSuppressPanicError: {
}

// corsRemovingTransport is a wrapper for an internal transport. It removes CORS headers
// from the internal response.
// Implements pkg/util/net.RoundTripperWrapper
_#corsRemovingTransport: {
	RoundTripper: http.#RoundTripper
}
