// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/apimachinery/pkg/apis/testapigroup

package testapigroup

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#ConditionStatus: string

#CarpConditionType: string

#CarpPhase: string

#RestartPolicy: string

// Carp is a collection of containers, used as either input (create, update) or as output (list, get).
#Carp: {
	TypeMeta: metav1.#TypeMeta

	// +optional
	ObjectMeta?: metav1.#ObjectMeta

	// Spec defines the behavior of a carp.
	// +optional
	Spec?: #CarpSpec

	// Status represents the current information about a carp. This data may not be up
	// to date.
	// +optional
	Status?: #CarpStatus
}

// CarpStatus represents information about the status of a carp. Status may trail the actual
// state of a system.
#CarpStatus: {
	// +optional
	Phase?: #CarpPhase

	// +optional
	Conditions?: [...#CarpCondition] @go(,[]CarpCondition)

	// A human readable message indicating details about why the carp is in this state.
	// +optional
	Message?: string

	// A brief CamelCase message indicating details about why the carp is in this state. e.g. 'DiskPressure'
	// +optional
	Reason?: string

	// +optional
	HostIP?: string

	// +optional
	CarpIP?: string

	// Date and time at which the object was acknowledged by the Kubelet.
	// This is before the Kubelet pulled the container image(s) for the carp.
	// +optional
	StartTime?: null | metav1.#Time @go(,*metav1.Time)
}

#CarpCondition: {
	Type:   #CarpConditionType
	Status: #ConditionStatus

	// +optional
	LastProbeTime?: metav1.#Time

	// +optional
	LastTransitionTime?: metav1.#Time

	// +optional
	Reason?: string

	// +optional
	Message?: string
}

// CarpSpec is a description of a carp
#CarpSpec: {
	// +optional
	RestartPolicy?: #RestartPolicy

	// Optional duration in seconds the carp needs to terminate gracefully. May be decreased in delete request.
	// Value must be non-negative integer. The value zero indicates delete immediately.
	// If this value is nil, the default grace period will be used instead.
	// The grace period is the duration in seconds after the processes running in the carp are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// +optional
	TerminationGracePeriodSeconds?: null | int64 @go(,*int64)

	// Optional duration in seconds relative to the StartTime that the carp may be active on a node
	// before the system actively tries to terminate the carp; value must be positive integer
	// +optional
	ActiveDeadlineSeconds?: null | int64 @go(,*int64)

	// NodeSelector is a selector which must be true for the carp to fit on a node
	// +optional
	NodeSelector?: {[string]: string} @go(,map[string]string)

	// ServiceAccountName is the name of the ServiceAccount to use to run this carp
	// The carp will be allowed to use secrets referenced by the ServiceAccount
	ServiceAccountName: string

	// NodeName is a request to schedule this carp onto a specific node.  If it is non-empty,
	// the scheduler simply schedules this carp onto that node, assuming that it fits resource
	// requirements.
	// +optional
	NodeName?: string

	// Specifies the hostname of the Carp.
	// If not specified, the carp's hostname will be set to a system-defined value.
	// +optional
	Hostname?: string

	// If specified, the fully qualified Carp hostname will be "<hostname>.<subdomain>.<carp namespace>.svc.<cluster domain>".
	// If not specified, the carp will not have a domainname at all.
	// +optional
	Subdomain?: string

	// If specified, the carp will be dispatched by specified scheduler.
	// If not specified, the carp will be dispatched by default scheduler.
	// +optional
	SchedulerName?: string
}

// CarpList is a list of Carps.
#CarpList: {
	TypeMeta: metav1.#TypeMeta

	// +optional
	ListMeta?: metav1.#ListMeta
	Items: [...#Carp] @go(,[]Carp)
}
